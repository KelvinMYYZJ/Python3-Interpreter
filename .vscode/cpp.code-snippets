{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Default":
	{
		"prefix": "ddefault",
		"body":
		[
			"#include<bits/stdc++.h>",
			"#ifndef ONLINE_JUDGE",
			"#ifndef BUG",
			"	#define DEBUG",
			"#endif",
			"#endif",
			"using namespace std;",
			"",
			"",
			"",
			"signed main()",
			"{",
			"	#ifndef ONLINE_JUDGE",
			"		freopen(\"${3:!input.txt}\",\"r\",stdin);",
			"		// freopen(\"${4:!output.txt}\",\"w\",stdout);",
			"	#endif",
			"	$1",
			"	return 0;",
			"}"
		]
	},"ffile":
	{
		"prefix": "ffile",
		"body":
		[
			
			"#ifndef ONLINE_JUDGE",
			"	freopen(\"${1:!input.txt}\",\"r\",stdin);",
			"	// freopen(\"${2:!output.txt}\",\"w\",stdout);",
			"#endif"
		]
	},"ddebug":
	{
		"prefix": "ddbug",
		"body":
		[
			
			"#ifdef DEBUG",
			"	printf(\"${1:fuck!\\n}\");",
			"#endif"
		]
	},
	"Ban_qpow":
	{
		"prefix": "qpow",
		"body":
		[
			"",
			"${1:long long} qpow(${1:long long} b,${1:long long} p,${1:long long} k)",
			"{",
			"	${1:long long} temp=b,ans=1;",
			"	while (p)",
			"	{",
			"		if (p & 1) ans = (ans * temp) % k;",
			"		p>>=1;",
			"		temp = (temp * temp) % k;",
			"	}",
			"	return ans;",
			"}",
			"$2"
		]
	},
	"For_Default":
	{
		"prefix": "forDefault",
		"body":
		[
			"for (${1:int} ${2:i}=${3:0};${2:i}<${4:n};${2:i}${5:++})"
		]
	},
	"Ban_FU":
	{
		"prefix": "Find Union",
		"body":
		[
			"${1:long} UF_findfather(${1:long} x)",
			"{",
			"	if (${2:father}[${2:father}[x]]==${2:father}[x]) return ${2:father}[x];",
			"	${2:father}[x]=fifa(${2:father}[x]);",
			"	return ${2:father}[x];",
			"}",
			"",
			"void UF_join(${1:long} x,${1:long} y)",
			"{",
			"	${2:father}[${2:father}[x]]=${2:father}[y];",
			"}"
		]
	}
}